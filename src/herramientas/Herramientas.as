/**	Autor: Camilo Figueroa	Nota:  Esta clase se encarga de validaciones y rutinas que aplican a la mayoria de aplicaciones en registros, mecánica	       de referidos, validacion de correos. Cosas asi.		   	Última actualización: 14/03/2012 19:05:00*/package herramientas{		public class Herramientas	{				public function Herramientas()		{					}				function verificaConfig( url:String )		{				/*var loaderG:URLLoader=new URLLoader();			var gGateway:String = "";						loaderG.dataFormat=URLLoaderDataFormat.VARIABLES;			//http://10.68.172.97/BonyurtSeptiembre2009/v1/www/			loaderG.load(new URLRequest(url));			//--			loaderG.addEventListener(Event.COMPLETE, carga);			//--				function carga(event:Event) 			{													gGateway = loaderG.data.gateway;				trace("gGateway " + gGateway);											}*/					}						/** 		* Generates a truly "random" number		* @return Random Number		*/ 		public function aleatorio( low:Number=0, high:Number=1 ):Number		{		  return Math.floor(Math.random() * (1+high-low)) + low;		}				/**		 * Recibe una cadena y el tamaño que debe tener, retorna la cadena en ese tamaño rellena de espacios		 * @param	cad					La cadena que se debe ajustar		 * @param	longCadEsperada		La longitud mínima o esperada que se necesita, a rellenar con caracter		 * @param	caracter			El caracter con el que se va a rellenar la cadena hasta alcanzar longCadEsperada		 * @return	String		 */		public function espacios( cad:String, longCadEsperada:String, caracter:String ):String		{			var respuesta:String = cad;			var cont:Number = 10000;						if ( longCadEsperada == "" || longCadEsperada == "undefined" ) longCadEsperada = "0";						while ( respuesta.length <= Number( longCadEsperada ) && cont > 0 )			{				respuesta += caracter;				cont --;			}						respuesta += "     ";						//return respuesta + "_" + cad.length + "_" + longCad;			return respuesta;		}						/**		 * Busca en una cadena coincidencias y reporta su valor a la derecha ej: xpos 1, retona 1		 * @param	cadIn		 * @param	cadBuscada		 * @return	cadena con el valor buscado		 */		public function buscaProtocolo( cadIn:String, cadBuscada:String ):String		{			var vector:Array = new Array();						if( cadIn.lastIndexOf( cadBuscada ) >= 0 )			{							vector = cadIn.split( cadBuscada );				cadIn = vector[1] + "";				vector = cadIn.split( "," );								//trace( "Protocolo .......   " + vector[0] + " ; " + vector[1] );								cadIn = vector[0] + "";							}else{ cadIn = ""; }						return cadIn;		}				/**		 * Agrega n caracteres a lado izquierdo o derecho de una expresion, si la longitud ...		 * ... de la cadena original es menor a la longitud esperada por el programador, si no, no adiciona.		 * @param	cad				String		La cadena original a la que se va a adicionar algun caracter		 * @param	caracter		String		Caracter de relleno		 * @param	des				Number		1. Por la izquierda. 2. Por la derecha.		 * @param	nCaracteres		Number		Los n caracteres que se quieren adicionar		 * @return		 */		public function adicionCaracter( cad:String, caracter:String, des:Number, nCaracteres:Number ):String		{			var i:Number = 0;						if ( cad.length < nCaracteres && des <= 2 )			{					for ( i = 1; i <= nCaracteres - cad.length; i ++ )				{					if ( des == 1 ) //Adiciona por la izquierda					{						cad = caracter + cad;											}else {	//Adiciona por la derecha												cad += caracter;					}				}				}						return cad;		}		/**		 * Retorna la fecha 		 */		public function pedirFecha():String		{			var fecha:Date = new Date();			var dia:String = fecha.getDate() + "";			var mes:String = ( fecha.getMonth() + 1 ) + "";						if( dia.length <= 1 ) dia = "0" + dia;			if( mes.length <= 1 ) mes = "0" + mes;						return  dia + "/" + mes ;		}				/**		 * Retorna el tiempo de la máquina en formato hh:mm:ss		 */		public function pedirTiempo():String		{			var d:Date = new Date();						return d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds();		}				/********validaciones y tratamiento de datos*****************************************************/		//Textos no vacios		/**		 * Evalúa si un dato es fecha		 * @param	fecha		 */		public function evaluarFecha(fecha:String)		{			var bandera:Boolean = false;			var cont:Number = 0;			var days:Number = 0;			var month:Number = 0;			var year:Number = 0;			var caracNoAdmit:String = "";			var bits:Array = new Array();						bits 	= fecha.split("-");			days 	= Number(bits[2]);			month 	= Number(bits[1]);			year	= Number(bits[0]) * 1;					if( days > 0 && days <= 31 && days != 0){ cont++; }			if( month > 0 && month <= 12 && month != 0){ cont++; }			if( year > 1900 && year <= 9999 && year != 0 ){ cont++; }			if( fecha.length >= 8 && fecha.length <= 10 ){ cont++; }						caracNoAdmit = ".,+*=/;:_#$%&()[]{}?¿¡! @áéíóúÁÉÍÓÚ";			caracNoAdmit += "abcdefghijklmnñopqrstuvwxyz";			caracNoAdmit += "ABCDEFGHIJKLMNÑOPQRSTUVWXYZ";						if ( buscarCoincidenciasNoAdmitidas( fecha, caracNoAdmit ) > 0 ) cont = 0;						if( cont >= 4 ){ bandera = true; }			//trace("bits   " + bits);			//trace(cont);						return bandera;		}		/**		 * Ajusta el formato de la fecha separandola, ajustando el número de dígitos y exportándola con un caracter...		 * ...de salida o con ninguno, segun se parametrice.		 * @param	fecha		String		Fecha a modificar		 * @param	cin			String		Caracter separador		 * @param	cout		String		Caracter separador a colocar		 * @return	String		 */		public function ajustarFecha( fecha:String, cin:String, cout:String ):String		{			var vec:Array;						vec = fecha.split( cin );			fecha = "";						fecha  = adicionCaracter( vec[ 0 ] + "", "0", 1, 4 ) + cout;			fecha += adicionCaracter( vec[ 1 ] + "", "0", 1, 2 ) + cout;			fecha += adicionCaracter( vec[ 2 ] + "", "0", 1, 2 );						return fecha;					}		/**		 * Convierte una fecha a formato numérico AAAAMMYY si todo está con formato fecha, verifica algunos errores de formato		 * @param	fec				String		Fecha que se ingresa		 * @param	separador		Sgring		Caracter separador de la fecha que se ingresa		 * @return	numFecha		Number		-1 Si hay algún error, de lo contrario retorna el número AAAAMMYY		 */		public function convertirFechaAAAAMMYY( fec:String, separador:String ):Number		{						var vector:Array = new Array();			var numFecha:Number = 0;						trace( fec.indexOf( separador ) + "  -  " + fec.lastIndexOf( separador ) );						if( fec.indexOf( separador ) >= 0 && fec.length >= 8 && fec.indexOf( separador ) != fec.lastIndexOf( separador ) )			{				vector = fec.split( separador );				numFecha = Number( vector[0] + "" ) * 10000 + Number( vector[1] + "" ) * 100 + Number( vector[2] + "" );								}else{ numFecha = -1; }						return numFecha;				}						/**		 * Busca coincidencias no admitidas en una cadena, si no 		 * @param	cad				Cadena original		 * @param	coincidencias	secuencia de caracteres para buscar coincidencias		 * @return	numero de coincidencias		 */		public function buscarCoincidenciasNoAdmitidas( cad:String, coincidencias:String ):Number		{			var cont:Number = 0, c:String = "";			var vec:Array = new Array();						if ( coincidencias.length > 0 )			{							vec = coincidencias.split("");								for ( var i:Number = 0; i < vec.length; i ++ )				{					c = vec[ i ] + "";					if ( cad.indexOf( c ) >= 0 ) cont ++;				}						}							return cont;		}				/**		 * retorna true si la cadena es vacia o no tiene los caracteres deseados		 * @param	valor		 * @param	nDigitos		 * @return		 */		public function validarTexto(valor:String, nDigitos:Number) 		{			var cadena:String = valor;			var bandera:Boolean = false;						if(cadena.length == (cadena.lastIndexOf(" ") + 1))			{	bandera = true;	}					if (valor == "" || valor.toLowerCase() == "undefined" || valor == null) 			{	bandera = true;	} 						if( cadena.length < nDigitos ) bandera = true;						return bandera;		}				//Valida email		public function validarMail(arg)		{					// compruebo que no este vacía la cadena exaustivamente			if (arg == "" || arg == null || arg == "null" || arg == undefined || arg == "undefined") 			{			return false;			// trace("cadena vacía");			// compruebo si hay una arroba y solo una			} else if (arg.indexOf("@") == -1 || arg.indexOf("@") != arg.lastIndexOf("@")) {			return false;			// trace("núm de @ erróneo");			} else {			// dividimos la direccion en usuario y dominio			var partes = arg.split("@");			var usuario = partes[0];			var dominio = partes[1];			// compruebo usuario			if (usuario.length<1) {			return false;			// trace("usuario vacío");			} else {			// compruebo si hay algún carácter raro			var caracteresProhibidos = new Array("º", "ª", "!", "#", "$", "%", "&", "¬", "/", "(", ")", "=", "?", "¿", "¡", ",", ";", ":", "[", "]", "{", "}", "á", "é", "í", "ó", "ú", "Á", "É", "Í", "Ó", "Ú");			var numCaracteresProhibidos = 0;			for (var k = 0; caracteresProhibidos[k]; k++) {			if (usuario.indexOf(caracteresProhibidos[k]) != -1) {			numCaracteresProhibidos++;			}			}			if (numCaracteresProhibidos>0) {			// trace("caracteres prohibidos encontrados");			return false;			// compruebo dominio			} else if (dominio.indexOf(".") == -1 || dominio.length<1) {			return false;			// trace("núm de puntos erróneo en dominio");			} else {			var partes_dominio = dominio.split(".");			var extension = partes_dominio[partes_dominio.length-1];			// compruebo que el dominio tenga como mínimo 3 chr antes del punto			if (dominio.length-extension.length<4) {			// trace("dominio menor de 3 chr");			return false;			} else if (extension.length<2 || extension.length>4) {			// trace("longitud de extension errónea");			return false;			} else {			//trace("mail correcto");			return true;			}			}			}			}					}				//Las trim, para quitar espacios---------------------------		public function ltrim(matter) 		{			var i:Number = 0;						if ((matter.length>1) || (matter.length == 1 && matter.charCodeAt(0)>32 && matter.charCodeAt(0)<255)) 			{				i = 0;				while (i<matter.length && (matter.charCodeAt(i)<=32 || matter.charCodeAt(i)>=255 || matter.charCodeAt(i)==160)) 				{ i++;	}				matter = matter.substring(i);			} 			else { matter = "";  }						return matter;		}				public function rtrim(matter) 		{			var i:Number = 0;						if ((matter.length>1) || (matter.length == 1 && matter.charCodeAt(0)>32 && matter.charCodeAt(0)<255)) 			{			   i = matter.length-1;			   while(i>=0 && (matter.charCodeAt(i)<=32 || matter.charCodeAt(i)>=255 || matter.charCodeAt(i)==160)) 			   { i--; }			   matter = matter.substring(0, i+1);			} 			else{  matter = ""; }						return matter;		}				public function trim(matter) {			return ltrim(rtrim(matter));		} 				//END Las trim, para quitar espacios---------------------------				/**			* Saca una cadena de otra que se encuentre entre dos palabras unicas en la expresion, en error retorna la misma cadena grande		*/		public function extraerEntreDosCadenas( cadena:String, cad1:String, cad2:String ):String		{			var arreglo1:Array = new Array();			var arreglo2:Array = new Array();			var cad:String = "";						if( cadena.lastIndexOf( cad1 ) >= 0 && cadena.lastIndexOf( cad2 ) >= 0 )			{				arreglo1 = cadena.split(cad2);				cad = arreglo1[0]; //Saco la parte inicial porque es la que necesito				arreglo2 = cad.split(cad1);				cad = arreglo2[1] + ""; //Saco la segunda parte que seria la del medio de las expresiones						}else{ cad = cadena; }							return cad;		}				public function soloNumeros(cadena:String, numMenor:Number, numMayor:Number)		{			var compara:String = "0123456789";				var bandera = true;			var i:Number = 0;			var bits:Array = new Array();						bits = cadena.split("");							//trace(bits +  " " + bits.length);			for( i=0; i<bits.length; i++)			{				if( compara.lastIndexOf(bits[i]+"") < 0 ){ bandera = false }				//trace(bits[i]);					}						if(numMenor > 0 || numMayor > 0) //Si son diferentes de cero, use los valores menor y mayor (para telefonos)			{	if( cadena.length < numMenor || cadena.length > numMayor ) bandera = false; }						return bandera		}				/*END****validaciones y tratamiento de datos*****************************************************/				public function remplazaCaracteresLatin( cadena1:String )		{			var vecCaracteres:Array = new Array( 	[["&Aacute;"], ["Á"]],													[["&Eacute;"], ["É"]], 													[["&Iacute;"], ["Í"]], 													[["&Oacute;"], ["Ó"]], 													[["&Uacute;"], ["Ú"]], 													[["&aacute;"], ["á"]], 													[["&eacute;"], ["é"]], 													[["&iacute;"], ["í"]], 													[["&oacute;"], ["ó"]], 													[["&uacute;"], ["ú"]],													[["&Ntilde;"], ["Ñ"]],													[["&ntilde;"], ["ñ"]]												);						var bandera:Number = 1;			var i:Number = 0;				var cadena2:String = "";							for( i=0; i<vecCaracteres.length; i++ )			{						bandera = cadena1.lastIndexOf( vecCaracteres[i][0] );								while( bandera >= 0 )				{					trace(vecCaracteres[i][0]);								cadena1 = strReplace(vecCaracteres[i][0] + "", vecCaracteres[i][1] + "", cadena1);					bandera = cadena1.lastIndexOf( vecCaracteres[i][0] );				}			}							cadena2 = cadena1;						return cadena2;			}						public function strReplace(busca:String, sust:String, cadena:String):String		{		   while(cadena.indexOf(busca)>=0) 		   {			  var ini:Number=cadena.indexOf(busca);			  var fin:Number=ini+busca.length;			  cadena=cadena.substring(0,ini)+sust+cadena.substring(fin,cadena.length);	  		   }		   return cadena;		}				private function calcularPorcentaje( total:Number, numero:Number ):Number		{			var p:Number = 0;						//total  -> 100%			//numero  -> %?						p = Math.round( numero * 100 / total );						return p;					}				/**		 * Convierte un objeto		 * @param	obj	Objeto a convertir		 * @return	String	Objeto convertido a una cadena de texto		 */		function objectToString( obj:Object ):String		{			var sResponse:String = "";			var space:String = "";			for ( var param in obj ){			   sResponse += space + param + ": " + obj[param];			   space = " | ";			}			return sResponse;		}			}	}